@page "/admin/product"
@page "/admin/product/{id:int}"
@inject IProductService ProductService
@inject IProductTypeService ProductTypeService
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (loading)
{
    <span>@msg</span>
}
else
{
    @if (product.Editing)
    {
        <h3>Edit "@product.Title"</h3>
    }
    else if (product.IsNew)
    {
        <h3>Create a new Product</h3>
    }

    <EditForm Model="product" OnValidSubmit="AddOrUpdateProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="mb-0">
            <label for="title">Title</label>
            <InputText id="title" @bind-Value="product.Title" class="form-control"></InputText>
        </div>
        <div class="mb-0">
            <label for="imageUrl">Image Url</label>
            <InputText id="imageUrl" @bind-Value="product.ImageUrl" class="form-control"></InputText>
        </div>
        <div class="mb-0" style="display: flex; flex-wrap: wrap; flex-direction: row; justify-content: center;">
            @if (!string.IsNullOrEmpty(product.ImageUrl))
            {
                <img src="@product.ImageUrl" />
            }
            else
            {
                foreach (var image in product.Images)
                {
                    <MudCard Class="ma-2">
                        <MudCardContent>
                            <MudImage Src="@image.Data" />
                        </MudCardContent>
                        <MudCardActions Style="justify-content: center;">
                            <MudButton Variant="Variant.Filled"
                           Color="Color.Error"
                           OnClick="@(() => RemoveImage(image.Id))">
                                Remove
                            </MudButton>
                        </MudCardActions>
                    </MudCard>
                }
            }
        </div>
        <div class="mb-0">
            <label for="images">Image(s)</label>
            <InputFile id="images" OnChange="OnFileChange" multiple class="form-control"></InputFile>
        </div>
        <div class="mb-0">
            <label for="description">Description</label>
            <InputTextArea id="description" @bind-Value="product.Description" class="form-control"></InputTextArea>
        </div>
        <hr />
        <div class="header">
            <div class="col">Product Type / Variant</div>
            <div class="col">Price</div>
            <div class="col">Original Price</div>
            <div class="col">Visible</div>
            <div class="col"></div>
        </div>
        @foreach (var variant in product.Variants)
        {
            <div class="row">
                <div class="col">
                    <InputSelect disabled="@variant.IsDeleted" @bind-Value="variant.ProductTypeId" class="form-control">
                        @foreach (var productType in ProductTypeService.ProductTypes)
                        {
                    <option value="@productType.Id.ToString()">@productType.Name</option>
                        }
            </InputSelect>
        </div>
        <div class="col">
                    <InputNumber @bind-Value="variant.Price" class="form-control" disabled="@variant.IsDeleted"></InputNumber>
        </div>
        <div class="col">
            <InputNumber @bind-Value="variant.OriginalPrice" class="form-control" disabled="@variant.IsDeleted"></InputNumber>
        </div>
        <div class="col col-visible">
            <InputCheckbox @bind-Value="variant.IsActive" style="transform:scale(1.5,1.5);" disabled="@variant.IsDeleted"></InputCheckbox>
        </div>
        <div class="col">
            <button type="button" class="btn btn-primary" disabled="@variant.IsDeleted" @onclick="@(() => RemoveVariant(variant.ProductTypeId))">
                <i class="oi oi-trash"></i>
            </button>
        </div>
    </div>
        }
        <button type="button" class="btn btn-primary" @onclick="AddVariant">
            <i class="oi oi-plus"></i> Add Variant
        </button>
        <hr />
        <div class="mb-0">
            <label for="category">Category</label>
            <InputSelect id="category" @bind-Value="product.CategoryId" class="form-control">
                @foreach (var category in CategoryService.AdminCategories)
                {
                <option value="@category.Id">@category.Name</option>
                }
        </InputSelect>
    </div>
    <hr />
    <div class="form-check">
        <InputCheckbox id="featured" @bind-Value="product.Featured" class="form-check-input"></InputCheckbox>
        <label for="featured" class="form-check-label">Featured</label>
    </div>
    <div class="form-check">
        <InputCheckbox id="visible" @bind-Value="product.IsActive" class="form-check-input"></InputCheckbox>
        <label for="visible" class="form-check-label">Visible</label>
    </div>
    <hr />
    <button type="submit" class="btn btn-primary float-end">@btnText</button>
    <ValidationSummary></ValidationSummary>
</EditForm>
    @if (!product.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteProduct">
            Delete Product
        </button>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    ProductDto product = new ProductDto();
    bool loading = true;
    string btnText = "";
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        await ProductTypeService.GetProductTypes();
        await CategoryService.GetAdminCategories();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == 0)
        {
            product = new ProductDto { IsNew = true };
            btnText = "Create Product";
        }
        else
        {
            ProductDto dbProduct = await ProductService.GetProductDetails(Id);
            if (dbProduct == null)
            {
                msg = $"Product with Id '{Id}' does not exist!";
                return;
            }
            product = dbProduct;
            product.Editing = true;
            btnText = "Update Product";
        }
        loading = false;
    }

    void RemoveVariant(int productTypeId)
    {
        var variant = product.Variants.Find(v => v.ProductTypeId == productTypeId);
        if (variant == null)
        {
            return;
        }
        if (variant.IsNew)
        {
            product.Variants.Remove(variant);
        }
        else
        {
            variant.IsDeleted = true;
        }
    }

    void AddVariant()
    {
        product.Variants
            .Add(new ProductVariantDto { IsNew = true, ProductId = product.Id });
    }

    async void AddOrUpdateProduct()
    {
        if (product.IsNew)
        {
            var result = await ProductService.CreateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{result.Id}");
        }
        else
        {
            product.IsNew = false;
            product = await ProductService.UpdateProduct(product);
            NavigationManager.NavigateTo($"admin/product/{product.Id}", true);
        }
    }

    async void DeleteProduct()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            $"Do you really want to delete '{product.Title}'?");
        if (confirmed)
        {
            await ProductService.DeleteProduct(product);
            NavigationManager.NavigateTo("admin/products");
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 200, 200);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            product.Images.Add(new ImageDto { Data = imageData });
        }
    }

    void RemoveImage(int id)
    {
        var image = product.Images.FirstOrDefault(i => i.Id == id);
        if (image != null)
        {
            product.Images.Remove(image);
        }
    }
}
